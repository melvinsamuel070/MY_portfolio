# name: Deploy Portfolio

# on:
#   push:
#     branches:
#       - master

# jobs:
#   build-and-deploy:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Build Docker image
#         run: |
#           docker build -t melvinsamuel070/potfolio:green .

#       - name: Login to Docker Hub
#         uses: docker/login-action@v3
#         with:
#           username: ${{ secrets.DOCKERHUB_USERNAME }}
#           password: ${{ secrets.DOCKERHUB_TOKEN }}

#       - name: Push Docker image
#         run: |
#           docker push melvinsamuel070/potfolio:green

#       - name: Deploy to EC2 instance
#         uses: appleboy/ssh-action@master
#         with:
#           host: ${{ secrets.EC2_HOST }}
#           username: ${{ secrets.EC2_USERNAME }}
#           key: ${{ secrets.EC2_KEY }}


#       - name: installation of docker and docker-compose
#         run: |
#           sudo apt-get update
#           sudo apt-get install -y docker.io
#           sudo apt-get install -y docker-compose

#       - name: Pull Docker image
#         run: |   
#             docker pull melvinsamuel070/potfolio:blue
#             docker pull melvinsamuel070/potfolio:green
#             docker stop portfolio || true
#             docker rm portfolio || true
#             docker run -d -p 1919:80 --name portfolio melvinsamuel070/potfolio:green

#       - name: Save Docker image locally
#         run: |
#           docker save melvinsamuel070/potfolio:green > portfolio_green.tar




# name: Deploy Portfolio

# on:
#   push:
#     branches:
#       - master

# jobs:
#   build-and-deploy:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Set Docker image tag
#         id: vars
#         shell: bash
#         run: echo "TAG=green" >> $GITHUB_ENV

#       - name: Build Docker image
#         run: |
#           docker build -t melvinsamuel070/potfolio:${TAG} .

#       - name: Login to Docker Hub
#         uses: docker/login-action@v3
#         with:
#           username: ${{ secrets.DOCKERHUB_USERNAME }}
#           password: ${{ secrets.DOCKERHUB_TOKEN }}

#       - name: Push Docker image to Docker Hub
#         run: |
#           docker push melvinsamuel070/potfolio:${TAG}
       
#       - name: Save Docker image locally (optional)
#         run: |
#           docker save melvinsamuel070/potfolio:${TAG} > portfolio_${TAG}.tar 

#       - name: Deploy to EC2 with Blue-Green strategy
#         uses: appleboy/ssh-action@master
#         with:
#           host: ${{ secrets.EC2_HOST }}
#           username: ${{ secrets.EC2_USERNAME }}
#           key: ${{ secrets.EC2_KEY }}
#           script: |
#             TAG=green

#             echo "Pulling latest Docker image..."
#             sudo docker pull melvinsamuel070/potfolio:${TAG}

#             CURRENT=$(sudo docker ps --filter "name=portfolio" --format "{{.Image}}" | grep -oE 'blue|green')
#             if [ "$CURRENT" == "${TAG}" ]; then
#               echo "Already running ${TAG}, no switch needed."
#               exit 0
#             fi

#             echo "Stopping existing container..."
#             sudo docker stop portfolio || true
#             sudo docker rm portfolio || true

#             echo "Starting new container..."
#             sudo docker run -d -p 3003:80 --name portfolio melvinsamuel070/potfolio:${TAG}








#       - name: Upload image as artifact
#         uses: actions/upload-artifact@v4
#         with:
#           name: portfolio-image
#           path: portfolio_green.tar

#       - name: Download image from artifact
#         uses: actions/download-artifact@v4
#         with:
#           name: portfolio-image
#           path: .






















name: Deploy Portfolio

on:
  push:
    branches:
      - master

jobs:
  static-analysis:
    runs-on: ubuntu-latest
    steps:
      - name: üßæ Checkout code
        uses: actions/checkout@v4

      - name: üîß Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: üì¶ Install dependencies
        run: npm install glob

      - name: Fix duplicate src attributes in HTML
        run: node fix-duplicate-src.js

      - name: üì¶ Install dependencies
        run: |
          npm install -g eslint stylelint htmlhint glob

      - name: üßº Run ESLint (auto-fix)
        run: eslint . --fix

      - name: üîß Run Stylelint (auto-fix)
        run: npx stylelint "**/*.{css,scss}" --fix || true

      - name: üîç Run HTMLHint before fixes
        run: htmlhint "**/*.html" || true

      - name: üîç Run HTMLHint after fixes
        run: htmlhint "**/*.html"

      - name: ‚úÖ Commit fixed files if any changes
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: 'chore: auto-fix linting and HTML issues'
          file_pattern: '**/*.js, **/*.css, **/*.html'

  build-and-deploy:
    needs: static-analysis
    runs-on: ubuntu-latest
    steps:
      - name: üßæ Checkout code
        uses: actions/checkout@v4

      - name: üè∑Ô∏è Set Docker image tag
        id: vars
        run: echo "TAG=green" >> $GITHUB_ENV

      - name: üèóÔ∏è Build Docker image
        run: |
          docker build -t melvinsamuel070/thefolio:${TAG} .

      - name: üîí Trivy Vulnerability Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: melvinsamuel070/potfolio:${{ env.TAG }}
          format: table
          exit-code: 0

      - name: üîë Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: üì§ Push Docker image to Docker Hub
        run: docker push melvinsamuel070/thefolio:${TAG}

      - name: üöÄ Deploy to EC2 with Blue-Green strategy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            TAG=green
            echo "Pulling latest Docker image..."
            sudo docker pull melvinsamuel070/potfolio:${TAG}
            
            CURRENT=$(sudo docker ps --filter "name=portfolio" --format "{{.Image}}" | grep -oE 'blue|green')
            if [ "$CURRENT" == "${TAG}" ]; then
              echo "Already running ${TAG}, no switch needed."
              exit 0
            fi
            echo "Installing Docker..."
            sudo apt update -y
            sudo apt install docker.io -y
            echo "Stopping existing container..."
            sudo docker stop portfolio || true
            sudo docker rm portfolio || true
            echo "Starting new container..."
            sudo docker run -d -p 3003:80 --name portfolio melvinsamuel070/potfolio:${TAG}

      - name: üì¶ Upload image as artifact
        uses: actions/upload-artifact@v4
        with:
          name: thefolio-image
          path: thefolio_green.tar

  security-scan:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    steps:
      - name: üßæ Checkout code
        uses: actions/checkout@v4

      - name: ‚è≥ Wait for application to be ready
        run: |
          for i in {1..30}; do
            if curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.EC2_HOST }}:3003 | grep -q "200"; then
              echo "Application is ready"
              exit 0
            fi
            echo "Waiting for application to start (attempt $i)..."
            sleep 5
          done
          echo "Application did not become ready in time"
          exit 1







      - name: üõ°Ô∏è Run ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.11.0
        with:
         target: 'http://${{ secrets.EC2_HOST }}:3003'
         cmd_options: '-I -T 60'
         fail_action: 'warn'
         allow_issue_writing: false
         upload_artifact: false  # Disable internal upload

      - name: üì¶ Rename ZAP Reports
        if: always()
        run: |
          [ -f report.json ] && mv report.json zap-report.json || echo "report.json not found"
          [ -f report.md ] && mv report.md zap-report.md || echo "report.md not found"
          [ -f report.html ] && mv report.html zap-report.html || echo "report.html not found"

      - name: üîç Verify Files
        if: always()
        run: ls -la zap-report.* || echo "No report files found"

      - name: üì§ Upload Scan Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
         name: zap-security-reports
         path: |
          zap-report.json
          zap-report.md
          zap-report.html
         retention-days: 3





          
